#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <cmath>
#include <windows.h>
using namespace std;

// Declared functions
void Startscreen (double& play);
void notplay ();
void delay(int seconds);
void groundwaterS();
void Instructions ();
void Deck(vector<int>& deck);
void shuffleDeck(vector<int>& deck);
void dealCards(const vector<int>& deck, vector<int>& player, vector<int>& ai1, vector<int>& ai2);
void displayHand(const string& name, const vector<int>& hand);
void displayCards(const vector<int>& player, const vector<int>& ai1, const vector<int>& ai2);
void Nugget(double& helpnugget);
void playRoundP(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);
void game(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& wong, vector<int>& deck, double& helpnugget, int& playagain, int& uwon, int& mwon, int& nwon, int& gamewon);
void playRoundM(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);
void playRoundN(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);
void playRoundL(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& playerCard, int& won, vector<int>& deck, int& uwon, int& mwon, int& nwon);
void playRoundP2(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);
void playRoundP3(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);
void endscreen(int& gamewon, double& helpnugget, int& playagain, vector<int>& player, vector<int>& ai1, vector<int>& ai2);
void playRoundM2(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);
void playRoundM3(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);
void playRoundN2(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);
void playRoundN3(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon);


int main ()
{
    // Defining variables
    double play;
    int playagain;
    double helpnugget;
    int won, playerCard, wong, gamewon;
    vector<int> player, ai1, ai2, deck;
    int mwon = 0, uwon = 0, nwon = 0;

    // Starting the code
    Startscreen (play);

    if (play == 1) // when user enters 1 it starts the game
    {
        playagain = 1;
        while (playagain == 1)
        {
            game(player, ai1, ai2, won, playerCard, wong, deck, helpnugget, playagain, uwon, mwon, nwon, gamewon);
        }
    }

    if (play == 2) // if user enters 2 it will direct them to the notplay function and end the program
    {
        notplay ();
    }


    return 0;
}



void Startscreen (double& play)

// function for start screen
{
cout<<"                                                WELCOME TO                                                           "<< endl;
cout<<"         GGGGGGGGGGG  UUUUUUUU     UUUUUUUU  RRRRRRRRRRRRRRRR    KKKKKKKKK    KKKKKKK              AAA               "<< endl;
cout<<"     GGG::::::::::::G U::::::U     U::::::U R::::::::::::::::R   K:::::::K    K:::::K             A:::A              "<< endl;
cout<<"   GG:::::::::::::::G U::::::U     U::::::U R::::::RRRRRR:::::R  K:::::::K    K:::::K            A:::::A             "<< endl;
cout<<"  G:::::GGGGGGGG::::G UU:::::U     U:::::UU RR:::::R     R:::::R K:::::::K   K::::::K           A:::::::A            "<< endl;
cout<<"  G:::::G       GGGGGG U:::::U     U:::::U   R::::R     R:::::R  KK::::::K  K:::::KKK          A:::::::::A           "<< endl;
cout<<" G:::::G               U:::::D     D:::::U   R::::R     R:::::R   K:::::K K:::::K             A:::::A:::::A          "<< endl;
cout<<" G:::::G               U:::::D     D:::::U   R::::RRRRRR:::::R    K::::::K:::::K             A:::::A A:::::A         "<< endl;
cout<<" G:::::G    GGGGGGGGGG U:::::D     D:::::U   R:::::::::::::RR     K:::::::::::K             A:::::A   A:::::A        "<< endl;
cout<<" G:::::G    G::::::::G U:::::D     D:::::U   R::::RRRRRR:::::R    K:::::::::::K            A:::::A     A:::::A       "<< endl;
cout<<" G:::::G    GGGGG::::G U:::::D     D:::::U   R::::R     R:::::R   K::::::K:::::K          A:::::AAAAAAAAA:::::A      "<< endl;
cout<<" G:::::G        G::::G U:::::D     D:::::U   R::::R     R:::::R   K:::::K K:::::K        A:::::::::::::::::::::A     "<< endl;
cout<<"  G:::::G       G::::G U::::::U   U::::::U   R::::R     R:::::R KK::::::K  K:::::KKK    A:::::AAAAAAAAAAAAA:::::A    "<< endl;
cout<<"   G:::::GGGGGGGG::::G U:::::::UUU:::::::U RR:::::R     R:::::R K:::::::K   K::::::K   A:::::A             A:::::A   "<< endl;
cout<<"    GG:::::::::::::::G  UU:::::::::::::UU  R::::::R     R:::::R K:::::::K    K:::::K  A:::::A               A:::::A  "<< endl;
cout<<"      GGG::::::GGG:::G    UU:::::::::UU    R::::::R     R:::::R K:::::::K    K:::::K A:::::A                 A:::::A "<< endl;
cout<<"         GGGGGG   GGGG      UUUUUUUUU      RRRRRRRR     RRRRRRR KKKKKKKKK    KKKKKKKAAAAAAA                   AAAAAAA"<< endl<<endl;

cout<<"Would you like to play?"<<endl;
cout<<"1 for yes, 2 for no, 3 for instructions\n"<<endl;
cin>>play;


while (true)
{
    if (play == 2006) //directs you to groundwater easter egg
    {
        groundwaterS();
        cout<<endl;
        cout<<"Would you like to play?"<<endl;
        cout<<"1 for yes, 2 for no, 3 for instructions\n"<<endl;
        cin>>play;
    }


    if (play == 3) //directs you to Instructions function
    {
        Instructions ();
        cin.clear();
        cout<<"Would you like to play?"<<endl;
        cout<<"1 for yes, 2 for no\n"<<endl;
        cin>>play;
    }


    if (play == 1) // breaks and countinues in int main
    {
        break;
    }



    if (play == 2) //breaks and countinues in int main
    {
        break;
    }

    else // anything else that the user inputs loops
{
    cin.clear();
    cin.ignore(10000, '\n');
    cout<<"Please enter 1, 2 or 3"<<endl;
    cin>>play;
}
}
}


void notplay () //function for when user inputs 2
{
    system("cls");



cout<<"                                         Thank you for NOT playing                                                   "<< endl;
delay(2);
cout<<"         GGGGGGGGGGG  UUUUUUUU     UUUUUUUU  RRRRRRRRRRRRRRRR    KKKKKKKKK    KKKKKKK              AAA               "<< endl;
cout<<"     GGG::::::::::::G U::::::U     U::::::U R::::::::::::::::R   K:::::::K    K:::::K             A:::A              "<< endl;
cout<<"   GG:::::::::::::::G U::::::U     U::::::U R::::::RRRRRR:::::R  K:::::::K    K:::::K            A:::::A             "<< endl;
cout<<"  G:::::GGGGGGGG::::G UU:::::U     U:::::UU RR:::::R     R:::::R K:::::::K   K::::::K           A:::::::A            "<< endl;
cout<<"  G:::::G       GGGGGG U:::::U     U:::::U   R::::R     R:::::R  KK::::::K  K:::::KKK          A:::::::::A           "<< endl;
cout<<" G:::::G               U:::::D     D:::::U   R::::R     R:::::R   K:::::K K:::::K             A:::::A:::::A          "<< endl;
cout<<" G:::::G               U:::::D     D:::::U   R::::RRRRRR:::::R    K::::::K:::::K             A:::::A A:::::A         "<< endl;
cout<<" G:::::G    GGGGGGGGGG U:::::D     D:::::U   R:::::::::::::RR     K:::::::::::K             A:::::A   A:::::A        "<< endl;
cout<<" G:::::G    G::::::::G U:::::D     D:::::U   R::::RRRRRR:::::R    K:::::::::::K            A:::::A     A:::::A       "<< endl;
cout<<" G:::::G    GGGGG::::G U:::::D     D:::::U   R::::R     R:::::R   K::::::K:::::K          A:::::AAAAAAAAA:::::A      "<< endl;
cout<<" G:::::G        G::::G U:::::D     D:::::U   R::::R     R:::::R   K:::::K K:::::K        A:::::::::::::::::::::A     "<< endl;
cout<<"  G:::::G       G::::G U::::::U   U::::::U   R::::R     R:::::R KK::::::K  K:::::KKK    A:::::AAAAAAAAAAAAA:::::A    "<< endl;
cout<<"   G:::::GGGGGGGG::::G U:::::::UUU:::::::U RR:::::R     R:::::R K:::::::K   K::::::K   A:::::A             A:::::A   "<< endl;
cout<<"    GG:::::::::::::::G  UU:::::::::::::UU  R::::::R     R:::::R K:::::::K    K:::::K  A:::::A               A:::::A  "<< endl;
cout<<"      GGG::::::GGG:::G    UU:::::::::UU    R::::::R     R:::::R K:::::::K    K:::::K A:::::A                 A:::::A "<< endl;
cout<<"         GGGGGG   GGGG      UUUUUUUUU      RRRRRRRR     RRRRRRR KKKKKKKKK    KKKKKKKAAAAAAA                   AAAAAAA"<< endl<<endl;
    cout<<"Goodbye!"<<endl;
    cout<<"Press enter to exit."<<endl;
}

void Instructions () // function for when the user inputs 3
{
    system("cls");
    cout<<"\n\n\nThis game gives each player 7 random cards. The first person chosen will be able to place down the first card." << endl;
    cout<<"After the first player places their card, the next player must place a card higher or of similar value, "<<endl;
    cout<<"the other players must do the same with the value the player before them placed."<<endl;
    cout<<"If a player is unable to match or place a card of high value, he/she must place the lowest card they have."<<endl;
    cout<<"The person that placed the highest card of that round wins and that allows them place the first card of the next round."<<endl;
    cout<<"when everybody has one card, everybody places their last card, the person with the lowest card wins."<<endl;
    cout<<"Ace's have highest value of 14 despite having a value of 1\n\n"<<endl;
}

void Deck(vector<int>& deck) // function for creating the deck
{

    for (int i = 2; i <= 14; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            deck.push_back(i);
        }
    }
    return;
}



void shuffleDeck(vector<int>& deck) // function for shuffling the deck
{
    srand(time(0));
    for (int i = deck.size() - 1; i > 0; --i)
    {
        int j = rand() % (i + 1);
        swap(deck[i], deck[j]);
    }
}



void dealCards(const vector<int>& deck, vector<int>& player, vector<int>& ai1, vector<int>& ai2) // function for dealing the cards
{
    for (int i = 0; i < 6; ++i)
    {
        player.push_back(deck[i]);
        ai1.push_back(deck[i + 6]);
        ai2.push_back(deck[i + 12]);
    }
}



void displayHand(const string& name, const vector<int>& hand) //Displays the Cards to the Player
{
    cout << name << "'s hand: ";
    for (size_t i = 0; i < hand.size(); ++i)
    {
    cout << hand[i] << " ";
    }
    cout << endl;
}



void displayCards(const vector<int>& player, const vector<int>& ai1, const vector<int>& ai2) // Displays the cards to the Player
{
    displayHand("User", player);
}



void game(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& wong, vector<int>& deck, double& helpnugget, int& playagain, int& uwon, int& mwon, int& nwon, int& gamewon) //This is the actual game
{
    system("cls");
    cout<<"Loading..."<<endl;
    srand(time(0));
    delay(rand() % 6);
    system("cls");

    cout<<"Done Loading, Enjoy!"<<endl;
    delay(1.75);
    system("cls");

    Deck(deck);
    shuffleDeck(deck);
    dealCards(deck, player, ai1, ai2);

    if (mwon >= 30)
    {

        if (nwon >= 30)
        {
            gamewon = 1;
        }

        if (uwon >= 30)
        {
            gamewon = 3;
        }
        playRoundP2(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
    }

    if (nwon >= 30)
    {
        if (mwon >= 30)
        {
            gamewon = 1;
        }

        if (uwon >= 30)
        {
            gamewon = 2;
        }

        playRoundP3(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);

    }

    if (uwon >= 30)
    {
        if (mwon >= 30)
        {
            gamewon = 3;
        }

        if (nwon >= 30)
        {
            gamewon = 2;
        }

        playRoundM2(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
    }
    else
    {
        playRoundP(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
    }

    // Loop for the rounds
    while (true)
    {

        if (won == 1)
        {
            system("cls");
            if (static_cast<int>(player.size()) == 1)
            {
                break;
            }
            if (mwon >= 30)
            {

                if (nwon >= 30)
                {
                    gamewon = 1;
                    break;
                }

                if (uwon >= 30)
                {
                    gamewon = 3;
                    break;
                }

                playRoundP2(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);

            }
            if (nwon >= 30)
            {
                if (mwon >= 30)
                {
                    gamewon = 1;
                    break;
                }

                if (uwon >= 30)
                {
                    gamewon = 2;
                    break;
                }

                playRoundP3(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);

            }

            if (uwon >= 30)
            {
                if (mwon >= 30)
                {
                    gamewon = 3;
                    break;
                }

                if (nwon >= 30)
                {
                    gamewon = 2;
                    break;
                }

                playRoundM2(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);

            }
            else
            {
                playRoundP(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }
            system("cls");

            // Break for last round

        }

        if (won == 2)
        {

            system("cls");
            if (static_cast<int>(player.size()) == 1)
            {
                break;
            }
            if (uwon >= 30)
            {
                if (mwon >= 30)
                {
                    gamewon = 3;
                    break;
                }

                if (nwon >= 30)
                {
                    gamewon = 2;
                    break;
                }
                playRoundM2(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }

            if (mwon >= 30)
            {
                if (uwon >= 30)
                {
                    gamewon = 3;
                    break;
                }

                if (nwon >= 30)
                {
                    gamewon = 1;
                    break;
                }
                playRoundN2(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }

            if (nwon >= 30)
            {
                if (uwon >= 30)
                {
                    gamewon = 2;
                    break;
                }

                if (mwon >= 30)
                {
                    gamewon = 1;
                    break;
                }
                playRoundM3(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }

            else
            {
                playRoundM(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }
            system("cls");
            // Break for last round

        }

        if (won == 3)
        {
            system("cls");
            if (static_cast<int>(player.size()) == 1)
            {
                break;
            }

            if (nwon >= 30)
            {
                if (mwon >= 30)
                {
                    gamewon = 1;
                    break;
                }

                if (uwon >= 30)
                {
                    gamewon = 2;
                    break;
                }

                playRoundP3(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }

            if (mwon >= 30)
            {
                if (nwon >= 30)
                {
                    gamewon = 1;
                    break;
                }

                if (uwon >= 30)
                {
                    gamewon = 3;
                    break;
                }

                playRoundN2(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }

            if (uwon >= 30)
            {
                if (nwon >= 30)
                {
                    gamewon = 2;
                    break;
                }

                if (mwon >= 30)
                {
                    gamewon = 3;
                    break;
                }

                playRoundN3(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }

            else
            {
                playRoundN(player, ai1, ai2, won, playerCard, uwon, mwon, nwon);
            }
            system("cls");
            // Break for last round

        }
    }

    if (gamewon == 1)
    {
        endscreen(gamewon, helpnugget, playagain, player, ai1, ai2);
    }

    if (gamewon == 2)
    {
        endscreen(gamewon, helpnugget, playagain, player, ai1, ai2);
    }

    if (gamewon == 3)
    {
        endscreen(gamewon, helpnugget, playagain, player, ai1, ai2);
    }
    else
    {
        playRoundL(player, ai1, ai2, won, playerCard, deck, uwon, mwon, nwon);
    }

}


// Function for first round and if the user won a round
void playRoundP(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    cout << "\nPlace your card (Enter The Number Position of The Card You Want to Place): ";
    cin >> playerCard;

    while (playerCard < 1 || playerCard > static_cast<int>(player.size()))
    {
        cin.clear();
        cin.ignore(10000, '\n');
        cout << "Invalid choice. Choose a valid card index (1 to " << player.size() << "): ";
        cin >> playerCard;
    }

    int userCard = player[playerCard - 1];
    player.erase(player.begin() + playerCard - 1);
    int maxCard = userCard;
    int ai1Card, ai2Card;
    string winner = "User";
    won = 1;

    while (true)
    {
        if (*max_element(ai1.begin(), ai1.end()) >= maxCard)
        {
            ai1Card = *max_element(ai1.begin(), ai1.end());
            ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));
            break;
        }


    if (*max_element(ai1.begin(), ai1.end()) << maxCard)
        {
            ai1Card = *min_element(ai1.begin(), ai1.end());
            ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));
            break;
        }
    }


    if (ai1Card >= maxCard)
    {
        maxCard = ai1Card;
        winner = "Max";
        won = 2;
    }

    while (true)
    {
        if (*max_element(ai2.begin(), ai2.end()) >= maxCard)
        {
        ai2Card = *max_element(ai2.begin(), ai2.end());
        ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
        break;
        }

        if (*max_element(ai2.begin(), ai2.end()) << maxCard)
        {
        ai2Card = *min_element(ai2.begin(), ai2.end());
        ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
        break;
        }
    }


    if (ai2Card >= maxCard)
    {
        maxCard = ai2Card;
        winner = "Nugget";
        won = 3;
    }


    cout << "\nUser placed: " << userCard << endl<< endl;
    cout << "\nMax placed: " << ai1Card << endl<< endl;
    cout << "\nNugget placed: "<< ai2Card << endl<< endl;

    cout <<winner<<" won the round\n"<< endl;

    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}


//Function for when Max wins a round
void playRoundM(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    int ai2Card, userCard;
    int ai1Card = *max_element(ai1.begin(), ai1.end());
    ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));

    cout << "\nMax placed: " << ai1Card << endl<< endl;
    int maxCard = ai1Card;

    string winner = "Max";
    won = 2;

    while (true)
    {
        if (*max_element(ai2.begin(), ai2.end()) >= maxCard)
        {
        ai2Card = *max_element(ai2.begin(), ai2.end());
        ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
        break;
        }

        if (*max_element(ai2.begin(), ai2.end()) << maxCard)
        {
        ai2Card = *min_element(ai2.begin(), ai2.end());
        ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
        break;
        }
    }
    cout << "\nNugget placed: " << ai2Card << endl<< endl;

    if (ai2Card >= maxCard)
    {
        maxCard = ai2Card;
        winner = "Nugget";
        won = 3;
    }

    cout << "\nPlace your card (Enter The Number Position of The Card You Want to Place): "<<endl;
    cin >> playerCard;


    // Lets the player try again if they put the wrong card index

        while (playerCard < 1 || playerCard > static_cast<int>(player.size()))
        {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << "Invalid choice. Choose a valid card index (1 to " << player.size() << "): ";
            cin >> playerCard;

        }

        userCard = player[playerCard - 1];
        player.erase(player.begin() + playerCard - 1);


    cout << "\nUser placed: " << userCard << endl<< endl;

    if (userCard >= maxCard)
    {
        maxCard = userCard;
        winner = "User";
        won = 1;
    }
    cout<<winner<<" won the round\n"<<endl;
    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}

//Function for when Nugget wins a round
void playRoundN(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    int ai2Card = *max_element(ai2.begin(), ai2.end());
    ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
    cout << "\nNugget placed: " << ai2Card << endl<< endl;
    int maxCard = ai2Card;
    int userCard, ai1Card;
    string winner = "Nugget";
    won = 3;

    cout << "\nPlace your card (Enter The Number Position of The Card You Want to Place): "<<endl;

        cin >> playerCard;


        while (playerCard < 1 || playerCard > static_cast<int>(player.size()))
        {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << "Invalid choice. Choose a valid card index (1 to " << player.size() << "): ";
            cin >> playerCard;
        }


        userCard = player[playerCard - 1];
        player.erase(player.begin() + playerCard - 1);

    if (userCard >= maxCard)
    {
        maxCard = userCard;
        winner = "User";
        won = 1;
    }


    while (true)
    {
        if (*max_element(ai1.begin(), ai1.end()) >= maxCard)
        {
            ai1Card = *max_element(ai1.begin(), ai1.end());
            ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));
            break;
        }


    if (*max_element(ai1.begin(), ai1.end()) << maxCard)
        {
            ai1Card = *min_element(ai1.begin(), ai1.end());
            ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));
            break;
        }
    }

    cout << "\nUser placed: " << userCard << endl<< endl;
    cout << "\nMax placed: " << ai1Card << endl<< endl;

    if (ai1Card >= maxCard)
    {
        maxCard = ai1Card;
        winner = "Max";
        won = 2;
    }

    cout<<winner<<" won the round\n"<<endl;
    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}

//Function for the Last round
void playRoundL(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& playerCard, int& won, vector<int>& deck, int& uwon, int& mwon, int& nwon)
{
    cout << "\nPlace your card (Enter The Number Position of The Card You Want to Place): ";
    cin >> playerCard;


    while (playerCard < 1 || playerCard > static_cast<int>(player.size()))
    {
        cin.clear();
        cin.ignore(10000, '\n');
        cout << "Invalid choice. Choose a valid card index (1 to " << player.size() << "): ";
        cin >> playerCard;
    }



    int userCard = player[playerCard - 1];
    player.erase(player.begin() + playerCard - 1);

    int ai1Card = *min_element(ai1.begin(), ai1.end());
    ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));

    int ai2Card = *min_element(ai2.begin(), ai2.end());
    ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));

    cout << "\nUser placed: " << userCard << endl<< endl;
    cout << "\nMax placed: " << ai1Card << endl<< endl;
    cout << "\nNugget placed: " << ai2Card << endl<< endl;

    int lowCard = userCard;
    string winner = "User";
    won = 1;

    if (ai1Card < lowCard)
    {
        lowCard = ai1Card;
        winner = "Max";
        won = 2;
    }

    if (ai2Card < lowCard)
    {
        lowCard = ai2Card;
        winner = "Nugget";
        won = 3;
    }

    uwon = uwon + userCard;
    mwon = mwon + ai1Card;
    nwon = nwon + ai2Card;

    if (won == 1)
    {
        uwon = uwon - userCard;
    }

    if (won == 2)
    {
        mwon = mwon - ai1Card;
    }

    if (won == 3)
    {
        nwon = nwon - ai2Card;
    }
    cout<<"  User  |  Max  | Nugget  "<<endl;
    cout<<"--------------------------"<<endl;
    cout<<"    "<<uwon<<"       "<<mwon<<"       "<<nwon<<endl;


    cout<<endl<<"Press Enter to continue to the next round"<<endl;
    cin.ignore();
    cin.get();

}
void delay(int seconds)
{
    clock_t start_time = clock();
    while (clock() < start_time + seconds * CLOCKS_PER_SEC)
    {
    }
}

void playRoundP2(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    cout << "\nPlace your card (Enter The Number Position of The Card You Want to Place): ";
    cin >> playerCard;

    while (playerCard < 1 || playerCard > static_cast<int>(player.size()))
    {
        cin.clear();
        cin.ignore(10000, '\n');
        cout << "Invalid choice. Choose a valid card index (1 to " << player.size() << "): ";
        cin >> playerCard;
    }

    int userCard = player[playerCard - 1];
    player.erase(player.begin() + playerCard - 1);
    int maxCard = userCard;
    int ai2Card;
    string winner = "User";
    won = 1;

    while (true)
    {
        if (*max_element(ai2.begin(), ai2.end()) >= maxCard)
        {
        ai2Card = *max_element(ai2.begin(), ai2.end());
        ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
        break;
        }

        if (*max_element(ai2.begin(), ai2.end()) << maxCard)
        {
        ai2Card = *min_element(ai2.begin(), ai2.end());
        ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
        break;
        }
    }


    if (ai2Card >= maxCard)
    {
        maxCard = ai2Card;
        winner = "Nugget";
        won = 3;
    }


    cout << "\nUser placed: " << userCard << endl<< endl;
    cout << "\nNugget placed: "<< ai2Card << endl<< endl;

    cout <<winner<<" won the round\n"<< endl;

    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}
void playRoundP3(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    cout << "\nPlace your card (Enter The Number Position of The Card You Want to Place): ";
    cin >> playerCard;

    while (playerCard < 1 || playerCard > static_cast<int>(player.size()))
    {
        cin.clear();
        cin.ignore(10000, '\n');
        cout << "Invalid choice. Choose a valid card index (1 to " << player.size() << "): ";
        cin >> playerCard;
    }

    int userCard = player[playerCard - 1];
    player.erase(player.begin() + playerCard - 1);
    int maxCard = userCard;
    int ai1Card, ai2Card;
    string winner = "User";
    won = 1;

    while (true)
    {
        if (*max_element(ai1.begin(), ai1.end()) >= maxCard)
        {
            ai1Card = *max_element(ai1.begin(), ai1.end());
            ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));
            break;
        }


    if (*max_element(ai1.begin(), ai1.end()) << maxCard)
        {
            ai1Card = *min_element(ai1.begin(), ai1.end());
            ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));
            break;
        }
    }


    if (ai1Card >= maxCard)
    {
        maxCard = ai1Card;
        winner = "Max";
        won = 2;
    }

    cout << "\nUser placed: " << userCard << endl<< endl;
    cout << "\nMax placed: " << ai1Card << endl<< endl;

    cout <<winner<<" won the round\n"<< endl;

    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}

void playRoundM2(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    int ai2Card, userCard;
    int ai1Card = *max_element(ai1.begin(), ai1.end());
    ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));

    cout << "\nMax placed: " << ai1Card << endl<< endl;
    int maxCard = ai1Card;

    string winner = "Max";
    won = 2;

    while (true)
    {
        if (*max_element(ai2.begin(), ai2.end()) >= maxCard)
        {
        ai2Card = *max_element(ai2.begin(), ai2.end());
        ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
        break;
        }

        if (*max_element(ai2.begin(), ai2.end()) << maxCard)
        {
        ai2Card = *min_element(ai2.begin(), ai2.end());
        ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
        break;
        }
    }
    cout << "\nNugget placed: " << ai2Card << endl<< endl;

    if (ai2Card >= maxCard)
    {
        maxCard = ai2Card;
        winner = "Nugget";
        won = 3;
    }

    cout<<winner<<" won the round\n"<<endl;
    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}


void playRoundM3(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    int ai2Card, userCard;
    int ai1Card = *max_element(ai1.begin(), ai1.end());
    ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));

    cout << "\nMax placed: " << ai1Card << endl<< endl;
    int maxCard = ai1Card;

    string winner = "Max";
    won = 2;

    cout << "\nPlace your card (Enter The Number Position of The Card You Want to Place): "<<endl;
    cin >> playerCard;


    // Lets the player try again if they put the wrong card index

        while (playerCard < 1 || playerCard > static_cast<int>(player.size()))
        {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << "Invalid choice. Choose a valid card index (1 to " << player.size() << "): ";
            cin >> playerCard;

        }

        userCard = player[playerCard - 1];
        player.erase(player.begin() + playerCard - 1);


    cout << "\nUser placed: " << userCard << endl<< endl;

    if (userCard >= maxCard)
    {
        maxCard = userCard;
        winner = "User";
        won = 1;
    }
    cout<<winner<<" won the round\n"<<endl;
    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}

void playRoundN2(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    int ai2Card = *max_element(ai2.begin(), ai2.end());
    ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
    cout << "\nNugget placed: " << ai2Card << endl<< endl;
    int maxCard = ai2Card;
    int userCard, ai1Card;
    string winner = "Nugget";
    won = 3;

    cout << "\nPlace your card (Enter The Number Position of The Card You Want to Place): "<<endl;

        cin >> playerCard;


        while (playerCard < 1 || playerCard > static_cast<int>(player.size()))
        {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << "Invalid choice. Choose a valid card index (1 to " << player.size() << "): ";
            cin >> playerCard;
        }


        userCard = player[playerCard - 1];
        player.erase(player.begin() + playerCard - 1);

    if (userCard >= maxCard)
    {
        maxCard = userCard;
        winner = "User";
        won = 1;
    }

    cout<<winner<<" won the round\n"<<endl;
    cout<<uwon<<" "<<mwon<<" "<<nwon<<endl;
    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}

void playRoundN3(vector<int>& player, vector<int>& ai1, vector<int>& ai2, int& won, int& playerCard, int& uwon, int& mwon, int& nwon)
{

    displayCards(player, ai1, ai2);
    cout<<endl<<endl;
    int ai2Card = *max_element(ai2.begin(), ai2.end());
    ai2.erase(find(ai2.begin(), ai2.end(), ai2Card));
    cout << "\nNugget placed: " << ai2Card << endl<< endl;
    int maxCard = ai2Card;
    int userCard, ai1Card;
    string winner = "Nugget";
    won = 3;

    while (true)
    {
        if (*max_element(ai1.begin(), ai1.end()) >= maxCard)
        {
            ai1Card = *max_element(ai1.begin(), ai1.end());
            ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));
            break;
        }


    if (*max_element(ai1.begin(), ai1.end()) << maxCard)
        {
            ai1Card = *min_element(ai1.begin(), ai1.end());
            ai1.erase(find(ai1.begin(), ai1.end(), ai1Card));
            break;
        }
    }

    cout << "\nUser placed: " << userCard << endl<< endl;
    cout << "\nMax placed: " << ai1Card << endl<< endl;

    if (ai1Card >= maxCard)
    {
        maxCard = ai1Card;
        winner = "Max";
        won = 2;
    }

    cout<<winner<<" won the round\n"<<endl;
    cout <<"Press enter to continue to the next round"<< endl<< endl;
    cin.ignore();
    cin.get();
}

void endscreen(int& gamewon, double& helpnugget, int& playagain, vector<int>& player, vector<int>& ai1, vector<int>& ai2)
{
    system("cls");

    if (gamewon == 1)
    {
        cout<<"User won the game"<<endl;
    }
    if (gamewon == 2)
    {
        cout<<"Max won the game"<<endl;
    }
    if (gamewon == 3)
    {
        cout<<"Nugget won the game"<<endl;
    }

    cout<<endl<<"Would you like to play again?"<<endl;
    cin>>playagain;
    while (true)
    {
        if (playagain == 1)
        {
            ai1.erase(ai1.begin(), ai1.end());
            ai2.erase(ai2.begin(), ai2.end());
            player.erase(player.begin(), player.end());
            break;
        }
        if (playagain == 2)
        {
            cout<<"\n\nThank you for Playing\n"<<endl;
            cout<<"Press enter to exit."<<endl;
            break;
        }
        //easter egg
        if (playagain == 1001)
        {
            Nugget(helpnugget);
            playagain = 2;
            cout<<endl<<endl;
            break;
        }
        else
        {
            cin.clear();
            cin.ignore();
            cout<<"Please enter 1 or 2"<<endl;
            cin>>playagain;
        }
    }
}



//do not type pass here________________________________________________________________________________________________________________________
void groundwaterS()
{ // groundwater easter egg function
    system("cls");
    PlaySound("ground.WAV", NULL, SND_FILENAME);
}


// Function for the Nugget easter egg
void Nugget (double& helpnugget)
{
    cout<<"WHAT!?!\nHELP ME!"<<endl;
    PlaySound("help.WAV", NULL, SND_FILENAME);
    cout<<"Press any number to like the video"<<endl;
    cin>>helpnugget;
    while (true)
    {
        if (cin.fail())
        {
            cin.clear();
            cout<<endl<<"YOU KILLED NUGGET!!!!!"<<endl;
            break;
        }
        else
        {
            cout<<endl<<"Gegagedigedagedago"<<endl;
            PlaySound("victory.WAV", NULL, SND_FILENAME);
            break;
        }
    }

}
